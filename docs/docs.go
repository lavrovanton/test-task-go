// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/services": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "services"
                ],
                "summary": "get services",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "id",
                            "created_at"
                        ],
                        "type": "string",
                        "description": "sort field",
                        "name": "sort_field",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "sort order",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "type"
                        ],
                        "type": "string",
                        "description": "filter field",
                        "name": "filter_field",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "VDS",
                            "Dedicated_Server",
                            "Hosting"
                        ],
                        "type": "string",
                        "description": " filter value",
                        "name": "filter_value",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/request.PaginationService"
                            }
                        }
                    },
                    "400": {
                        "description": "{ \"message\": \"param is not valid\" }"
                    },
                    "401": {
                        "description": "{ \"message\": \"authorization failed\" }"
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "services"
                ],
                "summary": "create service",
                "parameters": [
                    {
                        "description": "service creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CreateService"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "{ message: \"param is not valid\" }"
                    },
                    "401": {
                        "description": "{ \"message\": \"authorization failed\" }"
                    }
                }
            }
        },
        "/services/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "services"
                ],
                "summary": "get service by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Service"
                            }
                        }
                    },
                    "400": {
                        "description": "{ \"message\": \"param is not valid\" }"
                    },
                    "401": {
                        "description": "{ \"message\": \"authorization failed\" }"
                    },
                    "404": {
                        "description": "{ \"message\": \"resource not found\" }"
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "services"
                ],
                "summary": "delete service by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "{ message: \"param is not valid\" }"
                    },
                    "401": {
                        "description": "{ \"message\": \"authorization failed\" }"
                    },
                    "404": {
                        "description": "{ \"message\": \"resource not found\" }"
                    }
                }
            }
        }
    },
    "definitions": {
        "model.Service": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "paymentType": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "request.CreateService": {
            "type": "object",
            "required": [
                "name",
                "paymentType",
                "price",
                "type"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 255
                },
                "paymentType": {
                    "type": "string",
                    "maxLength": 255
                },
                "price": {
                    "type": "integer",
                    "minimum": 0
                },
                "type": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "request.PaginationService": {
            "type": "object",
            "properties": {
                "filter_field": {
                    "type": "string"
                },
                "filter_value": {
                    "type": "string"
                },
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "rows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Service"
                    }
                },
                "sort_field": {
                    "type": "string"
                },
                "sort_order": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "X-API-KEY",
            "in": "header"
        }
    },
    "security": [
        {
            "ApiKeyAuth": []
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "test-task-go",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
